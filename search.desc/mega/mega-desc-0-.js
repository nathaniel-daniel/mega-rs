searchState.loadedDescShard("mega", 0, "There was an api error\nAn error occured while decoding base64\nAn error occured while decoding base64\nFailed to decode base64\nA client\nA command\nFailed to decode attributes\nAn error that may occur while decoding attributes\nDecryption failed\nA directory\nAccess violation (like writing to a read-only share)\nInvalid arguments\nInvalid App key\nInvalid arguments\nUser blocked\nBusiness account expired\nAttempted circular link\nTried to create an object that already exists\nThe upload target url has expired\nUpload failed\nNot enough quota\nTried to access an incomplete resource\nInternal Error\nA decryption operation failed\nAccess denied for sub-users (buisness accounts only)\nNeed multifactor authentication\nObject not found\nRequest over quota\nOver Disk Quota Paywall\nThe file packet is out of range\nRatelimited\nRead failed\nInvalid or expired user session\nSSL verification failed\nResource temporarily unavailable\nToo many ips are trying to access this resource\nToo many connections to this resource\nWrite failed\nA client\nA reader for a file.\nA builder for a get_attributes call.\nThe library error type\nError\nAn API Error\nFetch the nodes\nResponse for FetchNodes command\nThe kind of node\nFetchNodes command response\nA file\nThe encryption key for a file.\nAn error that may occur while parsing a FileKey.\nEither a file or folder key\nAn error that occurs when a file fails validation.\nA struct to validate files.\nThe encryption key for a folder.\nAn error that may occur while parsing a FolderKey.\nGet the attributes of a node\nResponse for a GetAttributes command\nGetAttributes command response\nThe special inbox directory\nThe base64 string is the wrong size\nThe base64 string is the wrong size\nThe key was the wrong size\nThe key is the wrong size\nThe key is the wrong size\nInvalid utf8\nJson parse error\nA key was missing a header\nMissing the MEGA prefix\nSuccess\nSuccess\nFailed to parse a folder key\nAn error that may occur while parsing a mega url.\nA parsed file url\nA parsed folder url\nA parsed mega url.\nA reqwest Error\nAn api response\nAPI Response data\nThe returned number of responses did not match what was …\nThe special root directory\nThe special trash bin directory\nA parsed URL record.\nA Url Error\nThe actual created mac\nGet a ref to the file key, if it is one.\nGet as ref to the file url struct if it is a file url.\nGet a ref to the folder key, if it is one.\nGet as ref to the folder url struct if it is a folder url.\nReturn the serialization of this URL.\nReturn the authority of this URL as an ASCII string.\nReturn whether this URL is a cannot-be-a-base URL, meaning …\nChild data\nThe inner http client\nThe low-level api client\nDecode the encoded attributes\nGet a human-friendly description if the error\nSerialize with Serde using the internal representation of …\nIf this URL has a host and it is a domain name (not an IP …\nDownload a file and verify its integrity.\nDownload a file without verifying its integrity.\nThe download url\nEncoded attributes\nExecute a series of commands.\nThe expected mac\nFeed data.\nGet the nodes for a folder node.\nThe public file id\nThe file key\nFinish feeding this data and validate the file.\nThe folder id\nThe folder key\nReturn this URL’s fragment identifier, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a directory name as <code>std::path::Path</code> into an URL in …\nConvert a file name as <code>std::path::Path</code> into an URL in the …\nGet attributes for a file.\nReturn whether the URL has an ‘authority’, which can …\nEquivalent to <code>url.host().is_some()</code>.\nReturn the parsed representation of the host for this URL. …\nReturn the string representation of the host (domain or IP …\nSet the include_download_url field.\nWhether this should include the download url\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this into a Result.\nReturn the serialization of this URL.\nReturns true if this is a dir.\nReturns true if this is a file.\nCheck if this is a file key.\nCheck if finish has already been called.\nCheck if this is a folder key.\nReturns true if this is an inbox.\nReturns true if this is a root.\nReturn whether the URL is special (has a special scheme)\nReturns true if this is a trash bin.\nThe IV\nParse a string as an URL, with this URL as the base URL.\nGet the key.\nThe 128 bit AES key\nCreates a relative URL if possible, with this URL as the …\nThe meta mac\nMake a new file validator.\nMake a new client\nMake a new client\nMake a new builder.\nSet the node id.\nThe node id.\nReturn a default <code>ParseOptions</code> that can fully configure the …\nReturn the origin of this URL (…\nParse an absolute URL from a string.\nParse an absolute URL from a string and add params to its …\nReturn the password for this URL, if any, as a …\nReturn the path for this URL, as a percent-encoded ASCII …\nUnless this URL is cannot-be-a-base, return an iterator of …\nReturn an object with methods to manipulate this URL’s …\nReturn the port number for this URL, if any.\nReturn the port number for this URL, or the default port …\nSet the public file id.\nThe public id of the node.\nReturn this URL’s query string, if any, as a …\nParse the URL’s query string, if any, as …\nManipulate this URL’s query string, viewed as a sequence …\nSet the reference node id.\nThe reference node id.\nReturn the scheme of this URL, lower-cased, as an ASCII …\nThe sequence id\nSerialize with Serde using the internal representation of …\nChange this URL’s fragment identifier.\nChange this URL’s host.\nChange this URL’s host to the given IP address.\nChange this URL’s password.\nChange this URL’s path.\nChange this URL’s port number.\nChange this URL’s query string. If <code>query</code> is <code>None</code>, this …\nChange this URL’s scheme.\nChange this URL’s username.\nThe file size\nResolve a URL’s host and port number to <code>SocketAddr</code>.\nTake the file key, if it is one.\nTake the folder key, if it is one.\nAssuming the URL is in the <code>file</code> scheme or similar, convert …\nUnknown attributes\nUnknown attributes\nReturn the username for this URL (typically the empty …\nSet to Some(1) to include the download url in the response.\nThe id of the node\nThe public id of the node\nSet to 1 to make this recursive. Otherwise, leave it as 0.")